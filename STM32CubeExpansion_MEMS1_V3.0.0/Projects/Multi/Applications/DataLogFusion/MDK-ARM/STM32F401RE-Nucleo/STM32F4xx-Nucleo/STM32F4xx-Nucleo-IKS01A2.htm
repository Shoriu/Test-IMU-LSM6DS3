<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32F4xx-Nucleo\STM32F4xx-Nucleo-IKS01A2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32F4xx-Nucleo\STM32F4xx-Nucleo-IKS01A2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Dec 07 21:18:38 2016
<BR><P>
<H3>Maximum Stack Usage =       3016 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
iNemoEngine_API_Update &rArr; iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[fb]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fb]">MemManage_Handler</a><BR>
 <LI><a href="#[fc]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">BusFault_Handler</a><BR>
 <LI><a href="#[fd]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fd]">UsageFault_Handler</a><BR>
 <LI><a href="#[fe]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">SVC_Handler</a><BR>
 <LI><a href="#[100]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">PendSV_Handler</a><BR>
 <LI><a href="#[114]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[114]">ADC_IRQHandler</a><BR>
 <LI><a href="#[fa]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fa]">HardFault_Handler</a><BR>
 <LI><a href="#[1df]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1df]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[114]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fc]">BusFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[110]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[111]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[112]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[113]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[128]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12c]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12d]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12e]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12f]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[130]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[132]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[133]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[134]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[ff]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[108]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[125]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[109]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10a]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10b]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10c]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[115]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[106]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[138]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">HTS221_H_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[2]">HTS221_H_DeInit</a> from hts221_driver_hl.o(i.HTS221_H_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[d]">HTS221_H_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[7]">HTS221_H_Get_Hum</a> from hts221_driver_hl.o(i.HTS221_H_Get_Hum) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[8]">HTS221_H_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[5]">HTS221_H_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1]">HTS221_H_Init</a> from hts221_driver_hl.o(i.HTS221_H_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[b]">HTS221_H_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[4]">HTS221_H_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[3]">HTS221_H_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[9]">HTS221_H_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[a]">HTS221_H_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[c]">HTS221_H_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[13]">HTS221_T_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[f]">HTS221_T_DeInit</a> from hts221_driver_hl.o(i.HTS221_T_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1a]">HTS221_T_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[15]">HTS221_T_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14]">HTS221_T_Get_Temp</a> from hts221_driver_hl.o(i.HTS221_T_Get_Temp) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[12]">HTS221_T_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[e]">HTS221_T_Init</a> from hts221_driver_hl.o(i.HTS221_T_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[18]">HTS221_T_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[11]">HTS221_T_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[10]">HTS221_T_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[16]">HTS221_T_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17]">HTS221_T_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19]">HTS221_T_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[fa]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11e]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11d]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[120]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11f]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[137]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[136]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[49]">LIS3MDL_Check_WhoAmI</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Check_WhoAmI) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[45]">LIS3MDL_DeInit</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_DeInit) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4a]">LIS3MDL_Get_Axes</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4b]">LIS3MDL_Get_AxesRaw</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_AxesRaw) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[55]">LIS3MDL_Get_DRDY_Status</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_DRDY_Status) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[50]">LIS3MDL_Get_FS</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_FS) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4d]">LIS3MDL_Get_ODR</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_ODR) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4c]">LIS3MDL_Get_Sensitivity</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Sensitivity) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[48]">LIS3MDL_Get_WhoAmI</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_WhoAmI) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[44]">LIS3MDL_Init</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Init) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[53]">LIS3MDL_Read_Reg</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Read_Reg) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[47]">LIS3MDL_Sensor_Disable</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Disable) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[46]">LIS3MDL_Sensor_Enable</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Enable) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[51]">LIS3MDL_Set_FS</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[52]">LIS3MDL_Set_FS_Value</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS_Value) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4e]">LIS3MDL_Set_ODR</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4f]">LIS3MDL_Set_ODR_Value</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR_Value) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[54]">LIS3MDL_Write_Reg</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Write_Reg) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[3c]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[35]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[38]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[36]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3d]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3b]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[37]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3f]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[43]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[42]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3e]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[40]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[39]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3a]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[41]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[20]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1c]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[27]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[22]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[21]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1f]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1b]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[25]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1e]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[1d]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[23]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[24]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[26]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2d]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[29]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[34]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2f]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2e]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2c]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[28]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[32]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2b]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2a]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[30]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[31]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[33]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[5b]">LPS25HB_P_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[57]">LPS25HB_P_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_P_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[62]">LPS25HB_P_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5d]">LPS25HB_P_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5c]">LPS25HB_P_Get_Press</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5a]">LPS25HB_P_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[56]">LPS25HB_P_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[60]">LPS25HB_P_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[59]">LPS25HB_P_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[58]">LPS25HB_P_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5e]">LPS25HB_P_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5f]">LPS25HB_P_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[61]">LPS25HB_P_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[68]">LPS25HB_T_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[64]">LPS25HB_T_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_T_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6f]">LPS25HB_T_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6a]">LPS25HB_T_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[69]">LPS25HB_T_Get_Temp</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[67]">LPS25HB_T_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[63]">LPS25HB_T_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6d]">LPS25HB_T_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[66]">LPS25HB_T_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[65]">LPS25HB_T_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6b]">LPS25HB_T_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6c]">LPS25HB_T_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6e]">LPS25HB_T_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[89]">LSM6DS0_G_Check_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Check_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[85]">LSM6DS0_G_DeInit</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_DeInit) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8a]">LSM6DS0_G_Get_Axes</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8b]">LSM6DS0_G_Get_AxesRaw</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_AxesRaw) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[93]">LSM6DS0_G_Get_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[97]">LSM6DS0_G_Get_DRDY_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_DRDY_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[90]">LSM6DS0_G_Get_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8d]">LSM6DS0_G_Get_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8c]">LSM6DS0_G_Get_Sensitivity</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Sensitivity) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[88]">LSM6DS0_G_Get_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[84]">LSM6DS0_G_Init</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Init) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[95]">LSM6DS0_G_Read_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Read_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[87]">LSM6DS0_G_Sensor_Disable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Disable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[86]">LSM6DS0_G_Sensor_Enable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Enable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[94]">LSM6DS0_G_Set_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[91]">LSM6DS0_G_Set_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[92]">LSM6DS0_G_Set_FS_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8e]">LSM6DS0_G_Set_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8f]">LSM6DS0_G_Set_ODR_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[96]">LSM6DS0_G_Write_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Write_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[75]">LSM6DS0_X_Check_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Check_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[71]">LSM6DS0_X_DeInit</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_DeInit) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[76]">LSM6DS0_X_Get_Axes</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[77]">LSM6DS0_X_Get_AxesRaw</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_AxesRaw) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7f]">LSM6DS0_X_Get_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[83]">LSM6DS0_X_Get_DRDY_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_DRDY_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7c]">LSM6DS0_X_Get_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[79]">LSM6DS0_X_Get_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[78]">LSM6DS0_X_Get_Sensitivity</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Sensitivity) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[74]">LSM6DS0_X_Get_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[70]">LSM6DS0_X_Init</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Init) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[81]">LSM6DS0_X_Read_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Read_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[73]">LSM6DS0_X_Sensor_Disable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Disable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[72]">LSM6DS0_X_Sensor_Enable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Enable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[80]">LSM6DS0_X_Set_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7d]">LSM6DS0_X_Set_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7e]">LSM6DS0_X_Set_FS_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7a]">LSM6DS0_X_Set_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7b]">LSM6DS0_X_Set_ODR_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[82]">LSM6DS0_X_Write_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Write_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cd]">LSM6DS3_FIFO_G_Get_Axis</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Get_Axis) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cc]">LSM6DS3_FIFO_G_Set_Decimation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Set_Decimation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c2]">LSM6DS3_FIFO_Get_Data</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Data) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bf]">LSM6DS3_FIFO_Get_Empty_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Empty_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[be]">LSM6DS3_FIFO_Get_Full_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Full_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c3]">LSM6DS3_FIFO_Get_Num_Of_Samples</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c0]">LSM6DS3_FIFO_Get_Overrun_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Overrun_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c1]">LSM6DS3_FIFO_Get_Pattern</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Pattern) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c7]">LSM6DS3_FIFO_Set_INT1_FIFO_Full</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c6]">LSM6DS3_FIFO_Set_Mode</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Mode) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bd]">LSM6DS3_FIFO_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_ODR_Value) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c9]">LSM6DS3_FIFO_Set_Stop_On_Fth</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c8]">LSM6DS3_FIFO_Set_Watermark_Level</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Watermark_Level) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c5]">LSM6DS3_FIFO_X_Get_Axis</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Get_Axis) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c4]">LSM6DS3_FIFO_X_Set_Decimation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Set_Decimation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e9]">LSM6DS3_G_Check_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Check_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e5]">LSM6DS3_G_DeInit</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_DeInit) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ea]">LSM6DS3_G_Get_Axes</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[eb]">LSM6DS3_G_Get_AxesRaw</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_AxesRaw) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f3]">LSM6DS3_G_Get_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f7]">LSM6DS3_G_Get_DRDY_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_DRDY_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f0]">LSM6DS3_G_Get_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ed]">LSM6DS3_G_Get_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ec]">LSM6DS3_G_Get_Sensitivity</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Sensitivity) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e8]">LSM6DS3_G_Get_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e4]">LSM6DS3_G_Init</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Init) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f5]">LSM6DS3_G_Read_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Read_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e7]">LSM6DS3_G_Sensor_Disable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Disable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e6]">LSM6DS3_G_Sensor_Enable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Enable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f4]">LSM6DS3_G_Set_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f1]">LSM6DS3_G_Set_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f2]">LSM6DS3_G_Set_FS_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ce]">LSM6DS3_G_Set_Interrupt_Latch</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Interrupt_Latch) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ee]">LSM6DS3_G_Set_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ef]">LSM6DS3_G_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cf]">LSM6DS3_G_Set_SelfTest</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_SelfTest) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f6]">LSM6DS3_G_Write_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Write_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d5]">LSM6DS3_X_Check_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Check_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d1]">LSM6DS3_X_DeInit</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_DeInit) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b5]">LSM6DS3_X_Disable_6D_Orientation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_6D_Orientation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ae]">LSM6DS3_X_Disable_Double_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[99]">LSM6DS3_X_Disable_Free_Fall_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9d]">LSM6DS3_X_Disable_Pedometer</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Pedometer) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ab]">LSM6DS3_X_Disable_Single_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a1]">LSM6DS3_X_Disable_Step_Counter_Reset</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a4]">LSM6DS3_X_Disable_Tilt_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Tilt_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a7]">LSM6DS3_X_Disable_Wake_Up_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b4]">LSM6DS3_X_Enable_6D_Orientation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_6D_Orientation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ad]">LSM6DS3_X_Enable_Double_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[98]">LSM6DS3_X_Enable_Free_Fall_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9c]">LSM6DS3_X_Enable_Pedometer</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Pedometer) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[aa]">LSM6DS3_X_Enable_Single_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a0]">LSM6DS3_X_Enable_Step_Counter_Reset</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a3]">LSM6DS3_X_Enable_Tilt_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Tilt_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a6]">LSM6DS3_X_Enable_Wake_Up_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b6]">LSM6DS3_X_Get_6D_Orientation_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b8]">LSM6DS3_X_Get_6D_Orientation_XH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b7]">LSM6DS3_X_Get_6D_Orientation_XL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ba]">LSM6DS3_X_Get_6D_Orientation_YH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b9]">LSM6DS3_X_Get_6D_Orientation_YL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bc]">LSM6DS3_X_Get_6D_Orientation_ZH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bb]">LSM6DS3_X_Get_6D_Orientation_ZL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d6]">LSM6DS3_X_Get_Axes</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d7]">LSM6DS3_X_Get_AxesRaw</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_AxesRaw) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[df]">LSM6DS3_X_Get_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e3]">LSM6DS3_X_Get_DRDY_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_DRDY_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[af]">LSM6DS3_X_Get_Double_Tap_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[dc]">LSM6DS3_X_Get_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9a]">LSM6DS3_X_Get_Free_Fall_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d9]">LSM6DS3_X_Get_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9e]">LSM6DS3_X_Get_Pedometer_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Pedometer_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d8]">LSM6DS3_X_Get_Sensitivity</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Sensitivity) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ac]">LSM6DS3_X_Get_Single_Tap_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9f]">LSM6DS3_X_Get_Step_Count</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Step_Count) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a5]">LSM6DS3_X_Get_Tilt_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a8]">LSM6DS3_X_Get_Wake_Up_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d4]">LSM6DS3_X_Get_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d0]">LSM6DS3_X_Init</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Init) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e1]">LSM6DS3_X_Read_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Read_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d3]">LSM6DS3_X_Sensor_Disable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Disable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d2]">LSM6DS3_X_Sensor_Enable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Enable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e0]">LSM6DS3_X_Set_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[dd]">LSM6DS3_X_Set_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[de]">LSM6DS3_X_Set_FS_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9b]">LSM6DS3_X_Set_Free_Fall_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ca]">LSM6DS3_X_Set_Interrupt_Latch</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Interrupt_Latch) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[da]">LSM6DS3_X_Set_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[db]">LSM6DS3_X_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a2]">LSM6DS3_X_Set_Pedometer_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Pedometer_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cb]">LSM6DS3_X_Set_SelfTest</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_SelfTest) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b3]">LSM6DS3_X_Set_Tap_Duration_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Duration_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b2]">LSM6DS3_X_Set_Tap_Quiet_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b1]">LSM6DS3_X_Set_Tap_Shock_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Shock_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b0]">LSM6DS3_X_Set_Tap_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a9]">LSM6DS3_X_Set_Wake_Up_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e2]">LSM6DS3_X_Write_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Write_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[fb]">MemManage_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f9]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[131]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[127]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[103]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[100]">PendSV_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[107]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[126]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[105]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f8]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[129]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[121]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[122]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12b]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[139]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fe]">SVC_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[101]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[104]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[116]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[119]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[118]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[117]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11a]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11b]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11c]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12a]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13f]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[13d]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[13e]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[123]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[124]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[135]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[fd]">UsageFault_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[102]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[152]">compass_API_ForceReCalibration</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[14d]">compass_API_Init</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[151]">compass_API_IsCalibrated</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[150]">compass_API_Run</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[14e]">compass_API_SaveAcc</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[14f]">compass_API_SaveMag</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[140]">fputc</a> from fputc.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[153]">getCalibrationData</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[14c]">iNemoEngine_API_Get_Lib_Version</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[14b]">iNemoEngine_API_Propagate</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[14a]">iNemoEngine_API_Update</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[146]">iNemoEngine_API_enable_6X</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[147]">iNemoEngine_API_enable_9X</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[149]">iNemoEngine_API_getGbias</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[143]">iNemoEngine_API_getKnobs</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[144]">iNemoEngine_API_get_status_6X</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[145]">iNemoEngine_API_get_status_9X</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[141]">iNemoEngine_API_initialize</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[148]">iNemoEngine_API_setGbias</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[142]">iNemoEngine_API_setKnobs</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
 <LI><a href="#[13a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[154]">setCalibrationData</a> from osx_motion_fx.o(.text) referenced from osx_motion_fx.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[13c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[369]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[155]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[36a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[36b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[36c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[36d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[36e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[136]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36f]"></a>quaternion_reset_6X</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>m_b_sum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>m_sum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>m_std</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m_std &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[19e]"></a>rotVect_6X</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[17a]"></a>m_q2ypr2_eml</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, osx_motion_fx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[182]"></a>m_b_std</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, osx_motion_fx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[183]"></a>m_c_sum</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, osx_motion_fx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[372]"></a>m_d_sum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>m_e_sum</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>m_f_sum</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>m_g_sum</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>m_h_sum</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, osx_motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>osx_MotionFX_initialize</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osx_MotionFX_initialize &rArr; osx_LibLocker_RegisterLicense &rArr; osx_LibLocker_Decrypt32 &rArr; osx_LibLocker_Decrypt16
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_UnwrapAPIs
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_SetHandle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_RegisterLicense
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[18a]"></a>osx_MotionFX_setKnobs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_setKnobs &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[18b]"></a>osx_MotionFX_getKnobs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_getKnobs &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[18c]"></a>osx_MotionFX_getStatus_6X</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osx_motion_fx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>

<P><STRONG><a name="[18d]"></a>osx_MotionFX_getStatus_9X</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osx_motion_fx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>

<P><STRONG><a name="[18e]"></a>osx_MotionFX_enable_6X</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_enable_6X &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_6X
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_stop_6X
</UL>

<P><STRONG><a name="[18f]"></a>osx_MotionFX_enable_9X</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_enable_9X &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_stop_9X
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
</UL>

<P><STRONG><a name="[190]"></a>osx_MotionFX_setGbias</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_setGbias &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
</UL>

<P><STRONG><a name="[191]"></a>osx_MotionFX_getGbias</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_getGbias &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_stop_9X
</UL>

<P><STRONG><a name="[192]"></a>osx_MotionFX_update</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osx_MotionFX_update &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
</UL>

<P><STRONG><a name="[193]"></a>osx_MotionFX_propagate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osx_MotionFX_propagate &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
</UL>

<P><STRONG><a name="[194]"></a>osx_MotionFX_getLibVersion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, osx_motion_fx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>

<P><STRONG><a name="[195]"></a>osx_MotionFX_compass_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_compass_init &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[196]"></a>osx_MotionFX_compass_saveAcc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osx_MotionFX_compass_saveAcc &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[197]"></a>osx_MotionFX_compass_saveMag</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osx_MotionFX_compass_saveMag &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[198]"></a>osx_MotionFX_compass_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_compass_run &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[199]"></a>osx_MotionFX_compass_isCalibrated</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_compass_isCalibrated &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallCalibrationFromMemory
</UL>

<P><STRONG><a name="[19a]"></a>osx_MotionFX_compass_forceReCalibration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_compass_forceReCalibration &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>osx_MotionFX_getCalibrationData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_getCalibrationData &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[19c]"></a>osx_MotionFX_setCalibrationData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osx_MotionFX_setCalibrationData &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallCalibrationFromMemory
</UL>

<P><STRONG><a name="[186]"></a>osx_LibLocker_RegisterLicense</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osx_LibLocker_RegisterLicense &rArr; osx_LibLocker_Decrypt32 &rArr; osx_LibLocker_Decrypt16
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Decrypt32
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_initialize
</UL>

<P><STRONG><a name="[187]"></a>osx_LibLocker_Authenticate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_RetrieveUID
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_GetLibrary
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_update
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_setKnobs
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_setGbias
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_propagate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_initialize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getKnobs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getGbias
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_9X
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_6X
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getLibVersion
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getStatus_9X
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getStatus_6X
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_setCalibrationData
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getCalibrationData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_saveMag
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_saveAcc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_run
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_isCalibrated
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_forceReCalibration
</UL>

<P><STRONG><a name="[189]"></a>osx_LibLocker_UnwrapAPIs</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osx_LibLocker_UnwrapAPIs &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_RetrieveUID
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_GetLibrary
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_initialize
</UL>

<P><STRONG><a name="[1a6]"></a>osx_LibLocker_IsNodeFree</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, osxLibraryLocker100_CM4F_Keil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_GetLibrary
</UL>

<P><STRONG><a name="[377]"></a>osx_LibLocker_NumRegisteredLibraries</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osxLibraryLocker100_CM4F_Keil.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>osx_LibLocker_GetReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osxLibraryLocker100_CM4F_Keil.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>osx_LibLocker_GetMaxConcurrentLibraries</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osxLibraryLocker100_CM4F_Keil.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>osx_LibLocker_GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osxLibraryLocker100_CM4F_Keil.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>osx_LibLocker_SetHandle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osx_LibLocker_SetHandle &rArr; osx_LibLocker_GetLibrary
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_GetLibrary
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_initialize
</UL>

<P><STRONG><a name="[37b]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[37c]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[37d]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[37e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
</UL>

<P><STRONG><a name="[380]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[181]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Get_Lib_Version
</UL>

<P><STRONG><a name="[180]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Get_Lib_Version
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_c_sum
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_getGbias
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_setGbias
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_getGbias
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_setGbias
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_c_sum
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_b_std
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2ypr2_eml
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_std
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_getGbias
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_setGbias
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
</UL>

<P><STRONG><a name="[171]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_b_std
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2ypr2_eml
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_std
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_interp1q_constrain
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_getGbias
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_setGbias
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
</UL>

<P><STRONG><a name="[381]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[382]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[383]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[384]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[386]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ac]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[360]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[387]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[1b3]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>

<P><STRONG><a name="[35d]"></a>__ARM_dcmp4</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmax
</UL>

<P><STRONG><a name="[388]"></a>_dcmp4</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dcmp4.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[389]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>BSP_ACCELERO_Get_Axes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelero_Sensor_Handler
</UL>

<P><STRONG><a name="[1b9]"></a>BSP_ACCELERO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_ACCELERO_Init &rArr; BSP_LSM6DS3_ACCELERO_Init &rArr; LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>BSP_ACCELERO_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelero_Sensor_Handler
</UL>

<P><STRONG><a name="[363]"></a>BSP_ACCELERO_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>BSP_GYRO_Get_Axes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Sensor_Handler
</UL>

<P><STRONG><a name="[240]"></a>BSP_GYRO_Get_Instance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Get_Instance))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[1bc]"></a>BSP_GYRO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_GYRO_Init &rArr; BSP_LSM6DS3_GYRO_Init &rArr; LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>BSP_GYRO_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Sensor_Handler
</UL>

<P><STRONG><a name="[364]"></a>BSP_GYRO_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[248]"></a>BSP_HUMIDITY_Get_Hum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[1c2]"></a>BSP_HUMIDITY_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_HUMIDITY_Init &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[247]"></a>BSP_HUMIDITY_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[366]"></a>BSP_HUMIDITY_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>BSP_LED_Init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallCalibrationFromMemory
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallCalibrationFromMemory
</UL>

<P><STRONG><a name="[330]"></a>BSP_MAGNETO_Get_Axes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Get_Axes
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
</UL>

<P><STRONG><a name="[241]"></a>BSP_MAGNETO_Get_Instance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Get_Instance))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[1d0]"></a>BSP_MAGNETO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_MAGNETO_Init &rArr; BSP_LIS3MDL_MAGNETO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32f]"></a>BSP_MAGNETO_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
</UL>

<P><STRONG><a name="[365]"></a>BSP_MAGNETO_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d1]"></a>BSP_PB_GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_PB_GetState))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>BSP_PB_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>BSP_PRESSURE_Get_Instance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Instance))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[337]"></a>BSP_PRESSURE_Get_Press</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Get_Press
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pressure_Sensor_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>BSP_PRESSURE_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_PRESSURE_Init &rArr; BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[336]"></a>BSP_PRESSURE_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pressure_Sensor_Handler
</UL>

<P><STRONG><a name="[368]"></a>BSP_PRESSURE_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[343]"></a>BSP_TEMPERATURE_Get_Temp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>BSP_TEMPERATURE_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_TEMPERATURE_Init &rArr; BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[342]"></a>BSP_TEMPERATURE_IsInitialized</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_IsInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
</UL>

<P><STRONG><a name="[367]"></a>BSP_TEMPERATURE_Sensor_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23d]"></a>BUILD_REPLY_HEADER</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, demoserial.o(i.BUILD_REPLY_HEADER))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[1d8]"></a>ByteStuffCopy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, serial_protocol.o(i.ByteStuffCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ByteStuffCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStuffCopyByte
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
</UL>

<P><STRONG><a name="[1d9]"></a>ByteStuffCopyByte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, serial_protocol.o(i.ByteStuffCopyByte))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStuffCopy
</UL>

<P><STRONG><a name="[34b]"></a>CHK_CheckAndRemove</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial_protocol.o(i.CHK_CheckAndRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHK_CheckAndRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceivedMSG
</UL>

<P><STRONG><a name="[34c]"></a>CHK_ComputeAndAdd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, serial_protocol.o(i.CHK_ComputeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHK_ComputeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
</UL>

<P><STRONG><a name="[34f]"></a>Config_DMA_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cube_hal_f4.o(i.Config_DMA_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Configuration
</UL>

<P><STRONG><a name="[1da]"></a>DataLogTimerInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, main.o(i.DataLogTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataLogTimerInit &rArr; HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[ff]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>Deserialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, serial_protocol.o(i.Deserialize))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[125]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>

<P><STRONG><a name="[349]"></a>Get_DMA_Counter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cube_hal_f4.o(i.Get_DMA_Counter))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceivedMSG
</UL>

<P><STRONG><a name="[348]"></a>Get_DMA_Flag_Status</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, cube_hal_f4.o(i.Get_DMA_Flag_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Get_DMA_Flag_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceivedMSG
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_DMA_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Configuration
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1de]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[24d]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_I2C_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_Init &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[33f]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 722 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[202]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[204]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[205]"></a>HAL_RTC_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[206]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[208]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20a]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[211]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[20d]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; SF_Handler &rArr; MotionFX_manager_run &rArr; osx_MotionFX_update &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLogTimerInit
</UL>

<P><STRONG><a name="[20e]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback &rArr; SF_Handler &rArr; MotionFX_manager_run &rArr; osx_MotionFX_update &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLogTimerInit
</UL>

<P><STRONG><a name="[219]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLogTimerInit
</UL>

<P><STRONG><a name="[21c]"></a>HAL_TIM_OC_Stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[20f]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[344]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[21d]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[21e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[220]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[345]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[346]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[221]"></a>HAL_UART_Transmit</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
</UL>

<P><STRONG><a name="[223]"></a>HTS221_Activate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>

<P><STRONG><a name="[228]"></a>HTS221_DeActivate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[229]"></a>HTS221_Get_DataStatus</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_DRDY_Status
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_DRDY_Status
</UL>

<P><STRONG><a name="[22a]"></a>HTS221_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>

<P><STRONG><a name="[22b]"></a>HTS221_Get_Humidity</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, hts221_driver.o(i.HTS221_Get_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[22d]"></a>HTS221_Get_Odr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>

<P><STRONG><a name="[22e]"></a>HTS221_Get_Temperature</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, hts221_driver.o(i.HTS221_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[224]"></a>HTS221_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[236]"></a>HTS221_Set_BduMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_BduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Set_BduMode &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[239]"></a>HTS221_Set_Odr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>

<P><STRONG><a name="[225]"></a>HTS221_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[238]"></a>HTS221_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hts221_driver.o(i.HTS221_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTS221_assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
</UL>

<P><STRONG><a name="[23c]"></a>HandleMSG</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, demoserial.o(i.HandleMSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HandleMSG &rArr; RTC_TimeRegulate &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Get_Instance
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Get_Instance
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Get_Instance
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize_s32
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_stop_6X
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLogTimerInit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUILD_REPLY_HEADER
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33a]"></a>INIT_STREAMING_HEADER</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, demoserial.o(i.INIT_STREAMING_HEADER))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[252]"></a>LIS3MDL_MAG_Get_Magnetic</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_Get_Magnetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes_Raw
</UL>

<P><STRONG><a name="[254]"></a>LIS3MDL_MAG_R_FullScale</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Sensitivity
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_FS
</UL>

<P><STRONG><a name="[253]"></a>LIS3MDL_MAG_R_NewXYZData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_NewXYZData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LIS3MDL_MAG_R_NewXYZData &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_DRDY_Status
</UL>

<P><STRONG><a name="[255]"></a>LIS3MDL_MAG_R_OutputDataRate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_OutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LIS3MDL_MAG_R_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_ODR
</UL>

<P><STRONG><a name="[256]"></a>LIS3MDL_MAG_R_WHO_AM_I_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_WHO_AM_I_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_WhoAmI
</UL>

<P><STRONG><a name="[25b]"></a>LIS3MDL_MAG_ReadReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Read_Reg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_OutputDataRate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_NewXYZData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>

<P><STRONG><a name="[258]"></a>LIS3MDL_MAG_W_BlockDataUpdate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_MAG_W_BlockDataUpdate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[25d]"></a>LIS3MDL_MAG_W_FullScale</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS_Value
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS
</UL>

<P><STRONG><a name="[259]"></a>LIS3MDL_MAG_W_OperatingModeXY</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_OperatingModeXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_MAG_W_OperatingModeXY &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[25e]"></a>LIS3MDL_MAG_W_OutputDataRate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_OutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR_Value
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR
</UL>

<P><STRONG><a name="[257]"></a>LIS3MDL_MAG_W_SystemOperatingMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_SystemOperatingMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Enable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Disable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[25a]"></a>LIS3MDL_MAG_W_TemperatureSensor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_TemperatureSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_MAG_W_TemperatureSensor &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[25c]"></a>LIS3MDL_MAG_WriteReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LIS3MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Write_Reg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[26d]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[26f]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[264]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[263]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[265]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[271]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[272]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>

<P><STRONG><a name="[273]"></a>LPS22HB_Get_RawPressure</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>

<P><STRONG><a name="[274]"></a>LPS22HB_Get_RawTemperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>

<P><STRONG><a name="[275]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>

<P><STRONG><a name="[26e]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawTemperature
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_RawPressure
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>

<P><STRONG><a name="[1ca]"></a>LPS22HB_Sensor_IO_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.LPS22HB_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[27c]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[27b]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[266]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[267]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[268]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[269]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[26c]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[26a]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[26b]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[279]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[27a]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[278]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[277]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[283]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>

<P><STRONG><a name="[284]"></a>LPS25HB_Activate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>

<P><STRONG><a name="[288]"></a>LPS25HB_DeActivate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[289]"></a>LPS25HB_Get_DataStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_DRDY_Status
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[28b]"></a>LPS25HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>

<P><STRONG><a name="[28d]"></a>LPS25HB_Get_Odr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>

<P><STRONG><a name="[28e]"></a>LPS25HB_Get_Pressure</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_Press
</UL>

<P><STRONG><a name="[28f]"></a>LPS25HB_Get_RawPressure</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_RawPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>

<P><STRONG><a name="[290]"></a>LPS25HB_Get_RawTemperature</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_RawTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>

<P><STRONG><a name="[291]"></a>LPS25HB_Get_Temperature</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_Temp
</UL>

<P><STRONG><a name="[28a]"></a>LPS25HB_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawTemperature
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_RawPressure
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>

<P><STRONG><a name="[297]"></a>LPS25HB_Set_Avg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lps25hb_driver.o(i.LPS25HB_Set_Avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Set_Avg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[295]"></a>LPS25HB_Set_Bdu</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_Bdu &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[294]"></a>LPS25HB_Set_InterruptCircuitEnable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_InterruptCircuitEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_InterruptCircuitEnable &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[29f]"></a>LPS25HB_Set_Odr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>

<P><STRONG><a name="[285]"></a>LPS25HB_Set_PowerDownMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_PowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>

<P><STRONG><a name="[296]"></a>LPS25HB_Set_SpiInterface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_SpiInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Set_SpiInterface &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[29e]"></a>LPS25HB_WriteReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[29d]"></a>LPS25HB_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lps25hb_driver.o(i.LPS25HB_assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPS25HB_assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[2a0]"></a>LSM6DS0_ACC_GYRO_Get_Acceleration</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[2a2]"></a>LSM6DS0_ACC_GYRO_Get_AngularRate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_Get_AngularRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[2a3]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisX</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[2a4]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisY</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[2a5]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[2a6]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerDataRate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
</UL>

<P><STRONG><a name="[2a7]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[2a8]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerFullScale</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Sensitivity
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_FS
</UL>

<P><STRONG><a name="[2a9]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisX</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[2aa]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisY</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[2ab]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisZ</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[2ac]"></a>LSM6DS0_ACC_GYRO_R_GyroDataRate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
</UL>

<P><STRONG><a name="[2ad]"></a>LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[2ae]"></a>LSM6DS0_ACC_GYRO_R_GyroFullScale</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Sensitivity
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_FS
</UL>

<P><STRONG><a name="[2af]"></a>LSM6DS0_ACC_GYRO_R_WHO_AM_I_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_WHO_AM_I_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>

<P><STRONG><a name="[2a1]"></a>LSM6DS0_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataRate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisZ
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisY
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisX
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataRate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisY
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisX
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Read_Reg
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
</UL>

<P><STRONG><a name="[2b0]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisX</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b2]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisY</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b3]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b4]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerDataRate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Enabled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[2b5]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerFullScale</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS_Value
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS
</UL>

<P><STRONG><a name="[2b6]"></a>LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[2b7]"></a>LSM6DS0_ACC_GYRO_W_BlockDataUpdate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_BlockDataUpdate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[2b8]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisX</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[2b9]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisY</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[2ba]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisZ</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[2bb]"></a>LSM6DS0_ACC_GYRO_W_GyroDataRate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[2bc]"></a>LSM6DS0_ACC_GYRO_W_GyroFullScale</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS_Value
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS
</UL>

<P><STRONG><a name="[2b1]"></a>LSM6DS0_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Write_Reg
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
</UL>

<P><STRONG><a name="[1ce]"></a>LSM6DS0_Sensor_IO_ITConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LSM6DS0_Sensor_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>

<P><STRONG><a name="[2c8]"></a>LSM6DS3_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Raw
</UL>

<P><STRONG><a name="[2ca]"></a>LSM6DS3_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Raw
</UL>

<P><STRONG><a name="[2cb]"></a>LSM6DS3_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
</UL>

<P><STRONG><a name="[2cc]"></a>LSM6DS3_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Step_Count
</UL>

<P><STRONG><a name="[2cd]"></a>LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[2ce]"></a>LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[2cf]"></a>LSM6DS3_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_XH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[2d0]"></a>LSM6DS3_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[2d1]"></a>LSM6DS3_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_YH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[2d2]"></a>LSM6DS3_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_YL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[2d3]"></a>LSM6DS3_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_ZH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[2d4]"></a>LSM6DS3_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_ZL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[2d5]"></a>LSM6DS3_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[2d6]"></a>LSM6DS3_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[2d7]"></a>LSM6DS3_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOFull &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[2d8]"></a>LSM6DS3_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[2d9]"></a>LSM6DS3_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOPattern &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[2da]"></a>LSM6DS3_ACC_GYRO_R_FS_125</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_125 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
</UL>

<P><STRONG><a name="[2db]"></a>LSM6DS3_ACC_GYRO_R_FS_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
</UL>

<P><STRONG><a name="[2dc]"></a>LSM6DS3_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_FS
</UL>

<P><STRONG><a name="[2dd]"></a>LSM6DS3_ACC_GYRO_R_GDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_GDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[2de]"></a>LSM6DS3_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
</UL>

<P><STRONG><a name="[2df]"></a>LSM6DS3_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
</UL>

<P><STRONG><a name="[2e0]"></a>LSM6DS3_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_OVERRUN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[2e1]"></a>LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[2e2]"></a>LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[2e3]"></a>LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[2e4]"></a>LSM6DS3_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>

<P><STRONG><a name="[2e5]"></a>LSM6DS3_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[2e6]"></a>LSM6DS3_ACC_GYRO_R_XEN_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[2e7]"></a>LSM6DS3_ACC_GYRO_R_XEN_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[2e8]"></a>LSM6DS3_ACC_GYRO_R_XLDA</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XLDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[2e9]"></a>LSM6DS3_ACC_GYRO_R_YEN_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_YEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_YEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[2ea]"></a>LSM6DS3_ACC_GYRO_R_YEN_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_YEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_YEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[2eb]"></a>LSM6DS3_ACC_GYRO_R_ZEN_G</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ZEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[2ec]"></a>LSM6DS3_ACC_GYRO_R_ZEN_XL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ZEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[2c9]"></a>LSM6DS3_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_Reg
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_XL
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_G
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_XL
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_G
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XLDA
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_XL
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_G
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_OVERRUN
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_XL
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_G
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_GDA
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOPattern
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOFull
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZL
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZH
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YL
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XL
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XH
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
</UL>

<P><STRONG><a name="[2ed]"></a>LSM6DS3_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[2ef]"></a>LSM6DS3_ACC_GYRO_W_BDU</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_BDU &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[2f0]"></a>LSM6DS3_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[2f1]"></a>LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[2f2]"></a>LSM6DS3_ACC_GYRO_W_DUR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
</UL>

<P><STRONG><a name="[2f3]"></a>LSM6DS3_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[2f4]"></a>LSM6DS3_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[2f5]"></a>LSM6DS3_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FF_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[2f6]"></a>LSM6DS3_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FF_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Free_Fall_Threshold
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[2f7]"></a>LSM6DS3_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[2f8]"></a>LSM6DS3_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[2f9]"></a>LSM6DS3_ACC_GYRO_W_FSS5_on_INT1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FSS5_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FSS5_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[2fa]"></a>LSM6DS3_ACC_GYRO_W_FS_125</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_125 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS_Value
</UL>

<P><STRONG><a name="[2fb]"></a>LSM6DS3_ACC_GYRO_W_FS_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS_Value
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
</UL>

<P><STRONG><a name="[2fc]"></a>LSM6DS3_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS_Value
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[2fd]"></a>LSM6DS3_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FUNC_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[2fe]"></a>LSM6DS3_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[2ff]"></a>LSM6DS3_ACC_GYRO_W_LIR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[300]"></a>LSM6DS3_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[301]"></a>LSM6DS3_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[302]"></a>LSM6DS3_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[303]"></a>LSM6DS3_ACC_GYRO_W_PEDO_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PEDO_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PEDO_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[304]"></a>LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>

<P><STRONG><a name="[305]"></a>LSM6DS3_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Step_Counter_Reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[306]"></a>LSM6DS3_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
</UL>

<P><STRONG><a name="[307]"></a>LSM6DS3_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
</UL>

<P><STRONG><a name="[308]"></a>LSM6DS3_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
</UL>

<P><STRONG><a name="[309]"></a>LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[30a]"></a>LSM6DS3_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SIXD_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
</UL>

<P><STRONG><a name="[30b]"></a>LSM6DS3_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[30c]"></a>LSM6DS3_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[30d]"></a>LSM6DS3_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SelfTest_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_SelfTest
</UL>

<P><STRONG><a name="[30e]"></a>LSM6DS3_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_SelfTest
</UL>

<P><STRONG><a name="[30f]"></a>LSM6DS3_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[310]"></a>LSM6DS3_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
</UL>

<P><STRONG><a name="[311]"></a>LSM6DS3_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[312]"></a>LSM6DS3_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[313]"></a>LSM6DS3_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[314]"></a>LSM6DS3_ACC_GYRO_W_TILT_EN</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TILT_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TILT_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[315]"></a>LSM6DS3_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TIMER_HR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[316]"></a>LSM6DS3_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[317]"></a>LSM6DS3_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
</UL>

<P><STRONG><a name="[318]"></a>LSM6DS3_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[319]"></a>LSM6DS3_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WK_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Wake_Up_Threshold
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[31a]"></a>LSM6DS3_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
</UL>

<P><STRONG><a name="[31b]"></a>LSM6DS3_ACC_GYRO_W_XEN_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_XEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_XEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[31c]"></a>LSM6DS3_ACC_GYRO_W_XEN_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_XEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_XEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[31d]"></a>LSM6DS3_ACC_GYRO_W_YEN_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_YEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_YEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[31e]"></a>LSM6DS3_ACC_GYRO_W_YEN_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_YEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_YEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[31f]"></a>LSM6DS3_ACC_GYRO_W_ZEN_G</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ZEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
</UL>

<P><STRONG><a name="[320]"></a>LSM6DS3_ACC_GYRO_W_ZEN_XL</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ZEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
</UL>

<P><STRONG><a name="[2ee]"></a>LSM6DS3_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Write_Reg
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>

<P><STRONG><a name="[1cf]"></a>LSM6DS3_Sensor_IO_ITConfig</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, x_nucleo_iks01a1.o(i.LSM6DS3_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
</UL>

<P><STRONG><a name="[33c]"></a>MotionFX_manager_getDataOUT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_getDataOUT))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[331]"></a>MotionFX_manager_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, motionfx_manager.o(i.MotionFX_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MotionFX_manager_init &rArr; osx_MotionFX_initialize &rArr; osx_LibLocker_RegisterLicense &rArr; osx_LibLocker_Decrypt32 &rArr; osx_LibLocker_Decrypt16
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Get_Instance
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_setKnobs
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_initialize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getKnobs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_9X
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_6X
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[332]"></a>MotionFX_manager_run</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionFX_manager_run &rArr; osx_MotionFX_update &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_update
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_propagate
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[333]"></a>MotionFX_manager_start_6X</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_start_6X))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MotionFX_manager_start_6X &rArr; osx_MotionFX_enable_6X &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_6X
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[244]"></a>MotionFX_manager_start_9X</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_start_9X))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotionFX_manager_start_9X &rArr; osx_MotionFX_setGbias &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_setGbias
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_9X
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[243]"></a>MotionFX_manager_stop_6X</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_stop_6X))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MotionFX_manager_stop_6X &rArr; osx_MotionFX_enable_6X &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_6X
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[334]"></a>MotionFX_manager_stop_9X</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_stop_9X))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotionFX_manager_stop_9X &rArr; osx_MotionFX_getGbias &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getGbias
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_enable_9X
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[f9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[203]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[209]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[207]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[245]"></a>RTC_TimeRegulate</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.RTC_TimeRegulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC_TimeRegulate &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[34a]"></a>ReverseByteStuffCopyByte2</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, serial_protocol.o(i.ReverseByteStuffCopyByte2))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceivedMSG
</UL>

<P><STRONG><a name="[1c0]"></a>Sensor_IO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.Sensor_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
</UL>

<P><STRONG><a name="[237]"></a>Sensor_IO_Read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a1.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>

<P><STRONG><a name="[23a]"></a>Sensor_IO_Write</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, x_nucleo_iks01a1.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>

<P><STRONG><a name="[24a]"></a>Serialize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial_protocol.o(i.Serialize))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pressure_Sensor_Handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[1b8]"></a>Serialize_s32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial_protocol.o(i.Serialize_s32))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Sensor_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelero_Sensor_Handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
</UL>

<P><STRONG><a name="[101]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[340]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, cube_hal_f4.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; SF_Handler &rArr; MotionFX_manager_run &rArr; osx_MotionFX_update &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[21b]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>

<P><STRONG><a name="[215]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[347]"></a>UART_ReceivedMSG</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, com.o(i.UART_ReceivedMSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_ReceivedMSG &rArr; Get_DMA_Flag_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseByteStuffCopyByte2
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DMA_Flag_Status
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DMA_Counter
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHK_CheckAndRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23e]"></a>UART_SendMsg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, com.o(i.UART_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SendMsg &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHK_ComputeAndAdd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteStuffCopy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34d]"></a>USARTConfig</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, com.o(i.USARTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USARTConfig &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Configuration
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34e]"></a>USART_DMA_Configuration</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, com.o(i.USART_DMA_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_DMA_Configuration &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_DMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
</UL>

<P><STRONG><a name="[350]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38e]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[23b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
</UL>

<P><STRONG><a name="[169]"></a>__ARM_common_memclr4_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osx_motion_fx.o(i.__ARM_common_memclr4_9))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
</UL>

<P><STRONG><a name="[16e]"></a>__ARM_common_memset4_12</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, osx_motion_fx.o(i.__ARM_common_memset4_12))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[355]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[17c]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2ypr2_eml
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
</UL>

<P><STRONG><a name="[35a]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[166]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[172]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[174]"></a>__hardfp_fmax</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, fmax.o(i.__hardfp_fmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[162]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
</UL>

<P><STRONG><a name="[159]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_b_std
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_std
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
</UL>

<P><STRONG><a name="[361]"></a>__hardfp_trunc</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, trunc.o(i.__hardfp_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_trunc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
</UL>

<P><STRONG><a name="[357]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[35e]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[352]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[35b]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[354]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[35f]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[356]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[38f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[390]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[391]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[353]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[35c]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[358]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[140]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[13a]"></a>main</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; Temperature_Sensor_Handler &rArr; floatToInt &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_GetState
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Sensor_Enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Sensor_Enable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Sensor_Enable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Sensor_Enable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Sensor_Enable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Sensor_Enable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecallCalibrationFromMemory
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pressure_Sensor_Handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Magneto_Sensor_Handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Sensor_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accelero_Sensor_Handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTConfig
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceivedMSG
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_STREAMING_HEADER
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleMSG
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_forceReCalibration
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[359]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[226]"></a>HTS221_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Check_WhoAmI
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Check_WhoAmI
</UL>

<P><STRONG><a name="[22c]"></a>HTS221_Get_ODR</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_ODR
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_ODR
</UL>

<P><STRONG><a name="[227]"></a>HTS221_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_WhoAmI
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_WhoAmI
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>

<P><STRONG><a name="[6]"></a>HTS221_H_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>HTS221_H_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_DeInit &rArr; HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HTS221_H_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>HTS221_H_Get_Hum</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_H_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_H_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HTS221_H_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>HTS221_H_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_H_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HTS221_H_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_H_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_H_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_H_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_H_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_H_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_H_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_H_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22f]"></a>HTS221_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[230]"></a>HTS221_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Read_Reg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Read_Reg
</UL>

<P><STRONG><a name="[231]"></a>HTS221_Sensor_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
</UL>

<P><STRONG><a name="[232]"></a>HTS221_Sensor_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Enable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Enable
</UL>

<P><STRONG><a name="[233]"></a>HTS221_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR
</UL>

<P><STRONG><a name="[234]"></a>HTS221_Set_ODR_Value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR_Value
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR_Value
</UL>

<P><STRONG><a name="[13]"></a>HTS221_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Check_WhoAmI &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HTS221_T_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_T_DeInit &rArr; HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HTS221_T_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HTS221_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Get_ODR &rArr; HTS221_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HTS221_T_Get_Temp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HTS221_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Get_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_T_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_T_Init &rArr; HTS221_Init &rArr; HTS221_Check_WhoAmI &rArr; HTS221_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HTS221_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Read_Reg &rArr; HTS221_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HTS221_T_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Sensor_Disable &rArr; HTS221_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HTS221_T_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Sensor_Enable &rArr; HTS221_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HTS221_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HTS221_T_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_T_Set_ODR_Value &rArr; HTS221_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HTS221_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTS221_T_Write_Reg &rArr; HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[235]"></a>HTS221_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HTS221_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Write_Reg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Write_Reg
</UL>

<P><STRONG><a name="[25f]"></a>LPS22HB_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3c]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[270]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
</UL>

<P><STRONG><a name="[261]"></a>LPS22HB_Get_Press</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[262]"></a>LPS22HB_Get_Temp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[260]"></a>LPS22HB_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[276]"></a>LPS22HB_Initialize</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
</UL>

<P><STRONG><a name="[20]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_Get_RawPressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LPS22HB_P_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27d]"></a>LPS22HB_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
</UL>

<P><STRONG><a name="[281]"></a>LPS22HB_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[27e]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[27f]"></a>LPS22HB_Set_ODR_When_Disabled</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[280]"></a>LPS22HB_Set_ODR_When_Enabled</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
</UL>

<P><STRONG><a name="[2d]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_Get_RawTemperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LPS22HB_T_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Check_WhoAmI &rArr; LPS22HB_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Set_ODR_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Enabled
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[282]"></a>LPS22HB_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
</UL>

<P><STRONG><a name="[49]"></a>LIS3MDL_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LIS3MDL_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_DeInit &rArr; LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LIS3MDL_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LIS3MDL_Get_Axes &rArr; LIS3MDL_Get_Axes_Raw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Sensitivity
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LIS3MDL_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Get_AxesRaw &rArr; LIS3MDL_Get_Axes_Raw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[251]"></a>LIS3MDL_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_Get_Axes_Raw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_AxesRaw
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes
</UL>

<P><STRONG><a name="[55]"></a>LIS3MDL_Get_DRDY_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Get_DRDY_Status &rArr; LIS3MDL_MAG_R_NewXYZData &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_NewXYZData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LIS3MDL_Get_FS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Get_FS &rArr; LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LIS3MDL_Get_ODR</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Get_ODR &rArr; LIS3MDL_MAG_R_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LIS3MDL_Get_Sensitivity</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Get_Sensitivity &rArr; LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LIS3MDL_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LIS3MDL_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_Init &rArr; LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LIS3MDL_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LIS3MDL_Read_Reg &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LIS3MDL_Sensor_Disable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Sensor_Disable &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LIS3MDL_Sensor_Enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Sensor_Enable &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LIS3MDL_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Set_FS &rArr; LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LIS3MDL_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Set_FS_Value &rArr; LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LIS3MDL_Set_ODR</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Set_ODR &rArr; LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>LIS3MDL_Set_ODR_Value</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_Set_ODR_Value &rArr; LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LIS3MDL_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LIS3MDL_Write_Reg &rArr; LIS3MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[286]"></a>LPS25HB_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Check_WhoAmI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Check_WhoAmI
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[28c]"></a>LPS25HB_Get_ODR</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_ODR
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_ODR
</UL>

<P><STRONG><a name="[287]"></a>LPS25HB_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_WhoAmI
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_WhoAmI
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>

<P><STRONG><a name="[292]"></a>LPS25HB_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Init
</UL>

<P><STRONG><a name="[5b]"></a>LPS25HB_P_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Check_WhoAmI &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LPS25HB_P_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_DeInit &rArr; LPS25HB_P_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>LPS25HB_P_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LPS25HB_P_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Get_ODR &rArr; LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>LPS25HB_P_Get_Press</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_Get_Press &rArr; LPS25HB_Get_Pressure &rArr; LPS25HB_Get_RawPressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LPS25HB_P_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_P_Get_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>LPS25HB_P_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>LPS25HB_P_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_P_Read_Reg &rArr; LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LPS25HB_P_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LPS25HB_P_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Sensor_Enable &rArr; LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>LPS25HB_P_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_P_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>LPS25HB_P_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_P_Set_ODR_Value &rArr; LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>LPS25HB_P_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_P_Write_Reg &rArr; LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[298]"></a>LPS25HB_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Read_Reg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Read_Reg
</UL>

<P><STRONG><a name="[299]"></a>LPS25HB_Sensor_Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
</UL>

<P><STRONG><a name="[29a]"></a>LPS25HB_Sensor_Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[293]"></a>LPS25HB_Set_ODR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[29b]"></a>LPS25HB_Set_ODR_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR_Value
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[68]"></a>LPS25HB_T_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Check_WhoAmI &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>LPS25HB_T_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_DeInit &rArr; LPS25HB_T_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>LPS25HB_T_Get_DRDY_Status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>LPS25HB_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Get_ODR &rArr; LPS25HB_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>LPS25HB_T_Get_Temp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_Get_Temp &rArr; LPS25HB_Get_Temperature &rArr; LPS25HB_Get_RawTemperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>LPS25HB_T_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_T_Get_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>LPS25HB_T_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Check_WhoAmI &rArr; LPS25HB_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>LPS25HB_T_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_T_Read_Reg &rArr; LPS25HB_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LPS25HB_T_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Sensor_Disable &rArr; LPS25HB_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>LPS25HB_T_Sensor_Enable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Sensor_Enable &rArr; LPS25HB_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Sensor_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>LPS25HB_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_T_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>LPS25HB_T_Set_ODR_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_T_Set_ODR_Value &rArr; LPS25HB_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR_Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>LPS25HB_T_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LPS25HB_T_Write_Reg &rArr; LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29c]"></a>LPS25HB_Write_Reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LPS25HB_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Write_Reg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Write_Reg
</UL>

<P><STRONG><a name="[2bd]"></a>LSM6DS0_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Check_WhoAmI
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[89]"></a>LSM6DS0_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_G_Check_WhoAmI &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LSM6DS0_G_DeInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_DeInit &rArr; LSM6DS0_G_Sensor_Disable &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>LSM6DS0_G_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Get_Axes &rArr; LSM6DS0_G_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Sensitivity
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>LSM6DS0_G_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Get_AxesRaw &rArr; LSM6DS0_G_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2bf]"></a>LSM6DS0_G_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_G_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_AxesRaw
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes
</UL>

<P><STRONG><a name="[93]"></a>LSM6DS0_G_Get_Axes_Status</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_G_Get_Axes_Status &rArr; LSM6DS0_ACC_GYRO_R_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisZ
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisY
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>LSM6DS0_G_Get_DRDY_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_G_Get_DRDY_Status &rArr; LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>LSM6DS0_G_Get_FS</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_G_Get_FS &rArr; LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>LSM6DS0_G_Get_ODR</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>LSM6DS0_G_Get_Sensitivity</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_G_Get_Sensitivity &rArr; LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>LSM6DS0_G_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_G_Get_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>LSM6DS0_G_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_G_Init &rArr; LSM6DS0_G_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Disabled
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>LSM6DS0_G_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_G_Read_Reg &rArr; LSM6DS0_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LSM6DS0_G_Sensor_Disable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_G_Sensor_Disable &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>LSM6DS0_G_Sensor_Enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Sensor_Enable &rArr; LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>LSM6DS0_G_Set_Axes_Status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_G_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>LSM6DS0_G_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_G_Set_FS &rArr; LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>LSM6DS0_G_Set_FS_Value</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_G_Set_FS_Value &rArr; LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>LSM6DS0_G_Set_ODR</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_G_Set_ODR &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Disabled
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>LSM6DS0_G_Set_ODR_Value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_G_Set_ODR_Value &rArr; LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c3]"></a>LSM6DS0_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LSM6DS0_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[2c2]"></a>LSM6DS0_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Enable
</UL>

<P><STRONG><a name="[2c0]"></a>LSM6DS0_G_Set_ODR_When_Disabled</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[96]"></a>LSM6DS0_G_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_G_Write_Reg &rArr; LSM6DS0_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2be]"></a>LSM6DS0_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_WhoAmI
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_WhoAmI
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>

<P><STRONG><a name="[2c1]"></a>LSM6DS0_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Read_Reg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Read_Reg
</UL>

<P><STRONG><a name="[2c4]"></a>LSM6DS0_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS0_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Write_Reg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Write_Reg
</UL>

<P><STRONG><a name="[75]"></a>LSM6DS0_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Check_WhoAmI &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>LSM6DS0_X_DeInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_X_DeInit &rArr; LSM6DS0_X_Sensor_Disable &rArr; LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>LSM6DS0_X_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Get_Axes &rArr; LSM6DS0_X_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Sensitivity
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>LSM6DS0_X_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Get_AxesRaw &rArr; LSM6DS0_X_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c5]"></a>LSM6DS0_X_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_X_Get_Axes_Raw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_AxesRaw
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes
</UL>

<P><STRONG><a name="[7f]"></a>LSM6DS0_X_Get_Axes_Status</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Get_Axes_Status &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisY
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LSM6DS0_X_Get_DRDY_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Get_DRDY_Status &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>LSM6DS0_X_Get_FS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Get_FS &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>LSM6DS0_X_Get_ODR</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>LSM6DS0_X_Get_Sensitivity</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Get_Sensitivity &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>LSM6DS0_X_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_X_Get_WhoAmI &rArr; LSM6DS0_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>LSM6DS0_X_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_X_Init &rArr; LSM6DS0_X_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_When_Disabled
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>LSM6DS0_X_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_X_Read_Reg &rArr; LSM6DS0_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>LSM6DS0_X_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Sensor_Disable &rArr; LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>LSM6DS0_X_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Sensor_Enable &rArr; LSM6DS0_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>LSM6DS0_X_Set_Axes_Status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>LSM6DS0_X_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Set_FS &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>LSM6DS0_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Set_FS_Value &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>LSM6DS0_X_Set_ODR</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Set_ODR &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_When_Disabled
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>LSM6DS0_X_Set_ODR_Value</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Set_ODR_Value &rArr; LSM6DS0_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c7]"></a>LSM6DS0_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Enable
</UL>

<P><STRONG><a name="[2c6]"></a>LSM6DS0_X_Set_ODR_When_Disabled</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[82]"></a>LSM6DS0_X_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS0_X_Write_Reg &rArr; LSM6DS0_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[321]"></a>LSM6DS3_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Check_WhoAmI
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[cd]"></a>LSM6DS3_FIFO_G_Get_Axis</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_G_Get_Axis &rArr; LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>LSM6DS3_FIFO_G_Set_Decimation</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_G_Set_Decimation &rArr; LSM6DS3_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>LSM6DS3_FIFO_Get_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Get_Axis
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>LSM6DS3_FIFO_Get_Empty_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Get_Empty_Status &rArr; LSM6DS3_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>LSM6DS3_FIFO_Get_Full_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Get_Full_Status &rArr; LSM6DS3_ACC_GYRO_R_FIFOFull &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>LSM6DS3_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_FIFO_Get_Num_Of_Samples &rArr; LSM6DS3_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>LSM6DS3_FIFO_Get_Overrun_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Get_Overrun_Status &rArr; LSM6DS3_ACC_GYRO_R_OVERRUN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>LSM6DS3_FIFO_Get_Pattern</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_FIFO_Get_Pattern &rArr; LSM6DS3_ACC_GYRO_R_FIFOPattern &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>LSM6DS3_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DS3_ACC_GYRO_W_FSS5_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>LSM6DS3_FIFO_Set_Mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Set_Mode &rArr; LSM6DS3_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>LSM6DS3_FIFO_Set_ODR_Value</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Set_ODR_Value &rArr; LSM6DS3_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>LSM6DS3_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_Set_Stop_On_Fth &rArr; LSM6DS3_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>LSM6DS3_FIFO_Set_Watermark_Level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_FIFO_Set_Watermark_Level &rArr; LSM6DS3_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>LSM6DS3_FIFO_X_Get_Axis</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_X_Get_Axis &rArr; LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>LSM6DS3_FIFO_X_Set_Decimation</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_FIFO_X_Set_Decimation &rArr; LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>LSM6DS3_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Check_WhoAmI &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>LSM6DS3_G_DeInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_G_DeInit &rArr; LSM6DS3_G_Sensor_Disable &rArr; LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>LSM6DS3_G_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Get_Axes &rArr; LSM6DS3_G_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>LSM6DS3_G_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Get_AxesRaw &rArr; LSM6DS3_G_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[323]"></a>LSM6DS3_G_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_G_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_AxesRaw
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes
</UL>

<P><STRONG><a name="[f3]"></a>LSM6DS3_G_Get_Axes_Status</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Get_Axes_Status &rArr; LSM6DS3_ACC_GYRO_R_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_G
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_G
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>LSM6DS3_G_Get_DRDY_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Get_DRDY_Status &rArr; LSM6DS3_ACC_GYRO_R_GDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>LSM6DS3_G_Get_FS</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Get_FS &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>LSM6DS3_G_Get_ODR</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>LSM6DS3_G_Get_Sensitivity</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>LSM6DS3_G_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_Get_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>LSM6DS3_G_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_G_Init &rArr; LSM6DS3_G_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_When_Disabled
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>LSM6DS3_G_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_Read_Reg &rArr; LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>LSM6DS3_G_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Sensor_Disable &rArr; LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>LSM6DS3_G_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Sensor_Enable &rArr; LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>LSM6DS3_G_Set_Axes_Status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>LSM6DS3_G_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_FS &rArr; LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>LSM6DS3_G_Set_FS_Value</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Set_FS_Value &rArr; LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>LSM6DS3_G_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_Interrupt_Latch &rArr; LSM6DS3_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>LSM6DS3_G_Set_ODR</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_ODR &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_When_Disabled
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ef]"></a>LSM6DS3_G_Set_ODR_Value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Set_ODR_Value &rArr; LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Disabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[328]"></a>LSM6DS3_G_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value
</UL>

<P><STRONG><a name="[326]"></a>LSM6DS3_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Enable
</UL>

<P><STRONG><a name="[324]"></a>LSM6DS3_G_Set_ODR_When_Disabled</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[cf]"></a>LSM6DS3_G_Set_SelfTest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_G_Set_SelfTest &rArr; LSM6DS3_ACC_GYRO_W_SelfTest_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>LSM6DS3_G_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_G_Write_Reg &rArr; LSM6DS3_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[322]"></a>LSM6DS3_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_WhoAmI
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_WhoAmI
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>

<P><STRONG><a name="[325]"></a>LSM6DS3_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Read_Reg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Read_Reg
</UL>

<P><STRONG><a name="[327]"></a>LSM6DS3_Set_Interrupt_Latch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Interrupt_Latch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[329]"></a>LSM6DS3_Write_Reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LSM6DS3_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Write_Reg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Write_Reg
</UL>

<P><STRONG><a name="[d5]"></a>LSM6DS3_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Check_WhoAmI &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>LSM6DS3_X_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_DeInit &rArr; LSM6DS3_X_Disable_Pedometer &rArr; LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>LSM6DS3_X_Disable_6D_Orientation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Disable_6D_Orientation &rArr; LSM6DS3_ACC_GYRO_W_SIXD_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>LSM6DS3_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Disable_Double_Tap_Detection &rArr; LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>LSM6DS3_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Disable_Free_Fall_Detection &rArr; LSM6DS3_ACC_GYRO_W_FF_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>LSM6DS3_X_Disable_Pedometer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_X_Disable_Pedometer &rArr; LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>LSM6DS3_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Disable_Single_Tap_Detection &rArr; LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>LSM6DS3_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Disable_Step_Counter_Reset &rArr; LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LSM6DS3_X_Disable_Tilt_Detection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Disable_Tilt_Detection &rArr; LSM6DS3_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>LSM6DS3_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Disable_Wake_Up_Detection &rArr; LSM6DS3_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>LSM6DS3_X_Enable_6D_Orientation</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Enable_6D_Orientation &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>LSM6DS3_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Enable_Double_Tap_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>LSM6DS3_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Enable_Free_Fall_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Free_Fall_Threshold
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>LSM6DS3_X_Enable_Pedometer</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_X_Enable_Pedometer &rArr; LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>LSM6DS3_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Enable_Single_Tap_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>LSM6DS3_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Enable_Step_Counter_Reset &rArr; LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>LSM6DS3_X_Enable_Tilt_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Enable_Tilt_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LSM6DS3_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Enable_Wake_Up_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>LSM6DS3_X_Get_6D_Orientation_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_Status &rArr; LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>LSM6DS3_X_Get_6D_Orientation_XH</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_XH &rArr; LSM6DS3_ACC_GYRO_R_DSD_XH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>LSM6DS3_X_Get_6D_Orientation_XL</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_XL &rArr; LSM6DS3_ACC_GYRO_R_DSD_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>LSM6DS3_X_Get_6D_Orientation_YH</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_YH &rArr; LSM6DS3_ACC_GYRO_R_DSD_YH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>LSM6DS3_X_Get_6D_Orientation_YL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_YL &rArr; LSM6DS3_ACC_GYRO_R_DSD_YL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>LSM6DS3_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_ZH &rArr; LSM6DS3_ACC_GYRO_R_DSD_ZH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>LSM6DS3_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_ZL &rArr; LSM6DS3_ACC_GYRO_R_DSD_ZL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>LSM6DS3_X_Get_Axes</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Get_Axes &rArr; LSM6DS3_X_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>LSM6DS3_X_Get_AxesRaw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_AxesRaw &rArr; LSM6DS3_X_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32a]"></a>LSM6DS3_X_Get_Axes_Raw</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_X_Get_Axes_Raw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_AxesRaw
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes
</UL>

<P><STRONG><a name="[df]"></a>LSM6DS3_X_Get_Axes_Status</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Get_Axes_Status &rArr; LSM6DS3_ACC_GYRO_R_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_XL
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_XL
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>LSM6DS3_X_Get_DRDY_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_DRDY_Status &rArr; LSM6DS3_ACC_GYRO_R_XLDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>LSM6DS3_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Double_Tap_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>LSM6DS3_X_Get_FS</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_FS &rArr; LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>LSM6DS3_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Free_Fall_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>LSM6DS3_X_Get_ODR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>LSM6DS3_X_Get_Pedometer_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Pedometer_Status &rArr; LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>LSM6DS3_X_Get_Sensitivity</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>LSM6DS3_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Single_Tap_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>LSM6DS3_X_Get_Step_Count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Get_Step_Count &rArr; LSM6DS3_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>LSM6DS3_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Tilt_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>LSM6DS3_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Get_Wake_Up_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>LSM6DS3_X_Get_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Get_WhoAmI &rArr; LSM6DS3_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Get_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>LSM6DS3_X_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_X_Init &rArr; LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_When_Disabled
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>LSM6DS3_X_Read_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Read_Reg &rArr; LSM6DS3_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>LSM6DS3_X_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Sensor_Disable &rArr; LSM6DS3_X_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>LSM6DS3_X_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Sensor_Enable &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>LSM6DS3_X_Set_Axes_Status</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>LSM6DS3_X_Set_FS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_FS &rArr; LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>LSM6DS3_X_Set_FS_Value</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_FS_Value &rArr; LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>LSM6DS3_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Free_Fall_Threshold &rArr; LSM6DS3_ACC_GYRO_W_FF_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>LSM6DS3_X_Set_Interrupt_Latch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Interrupt_Latch &rArr; LSM6DS3_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Set_Interrupt_Latch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>LSM6DS3_X_Set_ODR</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_ODR &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_When_Disabled
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>LSM6DS3_X_Set_ODR_Value</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Disabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32d]"></a>LSM6DS3_X_Set_ODR_Value_When_Disabled</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
</UL>

<P><STRONG><a name="[32c]"></a>LSM6DS3_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Enable
</UL>

<P><STRONG><a name="[32b]"></a>LSM6DS3_X_Set_ODR_When_Disabled</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[a2]"></a>LSM6DS3_X_Set_Pedometer_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>LSM6DS3_X_Set_SelfTest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_SelfTest &rArr; LSM6DS3_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>LSM6DS3_X_Set_Tap_Duration_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Tap_Duration_Time &rArr; LSM6DS3_ACC_GYRO_W_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>LSM6DS3_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Tap_Quiet_Time &rArr; LSM6DS3_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>LSM6DS3_X_Set_Tap_Shock_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Tap_Shock_Time &rArr; LSM6DS3_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>LSM6DS3_X_Set_Tap_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>LSM6DS3_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_X_Set_Wake_Up_Threshold &rArr; LSM6DS3_ACC_GYRO_W_WK_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>LSM6DS3_X_Write_Reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LSM6DS3_X_Write_Reg &rArr; LSM6DS3_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Write_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24b]"></a>I2C_EXPBD_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_EXPBD_Error &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[24c]"></a>I2C_EXPBD_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Error
</UL>

<P><STRONG><a name="[24e]"></a>I2C_EXPBD_MspInit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.I2C_EXPBD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EXPBD_Init
</UL>

<P><STRONG><a name="[1bb]"></a>BSP_LSM6DS0_ACCELERO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_LSM6DS0_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LSM6DS0_ACCELERO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Sensor_IO_ITConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[1ba]"></a>BSP_LSM6DS3_ACCELERO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_LSM6DS3_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS3_ACCELERO_Init &rArr; LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init
</UL>

<P><STRONG><a name="[1be]"></a>BSP_LSM6DS0_GYRO_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_LSM6DS0_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LSM6DS0_GYRO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
</UL>

<P><STRONG><a name="[1bd]"></a>BSP_LSM6DS3_GYRO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_LSM6DS3_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS3_GYRO_Init &rArr; LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init
</UL>

<P><STRONG><a name="[1bf]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init
</UL>

<P><STRONG><a name="[1c8]"></a>BSP_LIS3MDL_MAGNETO_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_LIS3MDL_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LIS3MDL_MAGNETO_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init
</UL>

<P><STRONG><a name="[1c9]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[1cc]"></a>BSP_LPS25HB_PRESSURE_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_LPS25HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init
</UL>

<P><STRONG><a name="[1c1]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[1cb]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[1cd]"></a>BSP_LPS25HB_TEMPERATURE_Init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_LPS25HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init &rArr; I2C_EXPBD_Init &rArr; I2C_EXPBD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[1fc]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1e4]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1e6]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[250]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
</UL>

<P><STRONG><a name="[1f1]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1f4]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[1f0]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[24f]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[1f2]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1f5]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[214]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[216]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[217]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[13f]"></a>UART_DMAError</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[13d]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[13e]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[21f]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[222]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1b5]"></a>Accelero_Sensor_Handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i.Accelero_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Accelero_Sensor_Handler &rArr; BSP_ACCELERO_Get_Axes
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_IsInitialized
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Get_Axes
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize_s32
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e0]"></a>Gyro_Sensor_Handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i.Gyro_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gyro_Sensor_Handler &rArr; BSP_GYRO_Get_Axes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_IsInitialized
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Get_Axes
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize_s32
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>Humidity_Sensor_Handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.Humidity_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Humidity_Sensor_Handler &rArr; floatToInt &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_IsInitialized
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Get_Hum
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32e]"></a>Magneto_Sensor_Handler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(i.Magneto_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Magneto_Sensor_Handler &rArr; BSP_MAGNETO_Get_Axes
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_IsInitialized
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Get_Axes
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize_s32
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[335]"></a>Pressure_Sensor_Handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.Pressure_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Pressure_Sensor_Handler &rArr; floatToInt &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_IsInitialized
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Get_Press
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[338]"></a>RTC_Config</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, main.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RTC_Config &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[339]"></a>RecallCalibrationFromMemory</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i.RecallCalibrationFromMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RecallCalibrationFromMemory &rArr; osx_MotionFX_setCalibrationData &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_setCalibrationData
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_isCalibrated
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33e]"></a>ResetCalibrationInMemory</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.ResetCalibrationInMemory))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>SF_Handler</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, main.o(i.SF_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SF_Handler &rArr; MotionFX_manager_run &rArr; osx_MotionFX_update &rArr; osx_LibLocker_Authenticate &rArr; osx_LibLocker_RetrieveUID
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_IsInitialized
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Get_Axes
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_IsInitialized
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Get_Axes
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_IsInitialized
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Get_Axes
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_stop_9X
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_6X
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_getDataOUT
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendMsg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize_s32
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_stop_6X
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_STREAMING_HEADER
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_getCalibrationData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_saveMag
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_saveAcc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_run
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_MotionFX_compass_isCalibrated
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>

<P><STRONG><a name="[33b]"></a>SaveCalibrationToMemory</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.SaveCalibrationToMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveCalibrationToMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Handler
</UL>

<P><STRONG><a name="[341]"></a>Temperature_Sensor_Handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(i.Temperature_Sensor_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Temperature_Sensor_Handler &rArr; floatToInt &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_IsInitialized
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Get_Temp
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatToInt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serialize
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[249]"></a>floatToInt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(i.floatToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = floatToInt &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature_Sensor_Handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pressure_Sensor_Handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Humidity_Sensor_Handler
</UL>

<P><STRONG><a name="[157]"></a>m_norm_eml</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_norm_eml &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[176]"></a>m_q2dcm_eml</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[16a]"></a>AsyncHeadway_initialize</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AsyncHeadway_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_enable_9X
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_enable_6X
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
</UL>

<P><STRONG><a name="[15b]"></a>m_dcm2q_eml</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_dcm2q_eml &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[19d]"></a>IsNotFlat</STRONG> (Thumb, 858 bytes, Stack size 36 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IsNotFlat
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCompass_Offset
</UL>

<P><STRONG><a name="[14d]"></a>compass_API_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>compass_API_SaveAcc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>compass_API_SaveMag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>compass_API_Run</STRONG> (Thumb, 1518 bytes, Stack size 80 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = compass_API_Run &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eCompass_Offset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>compass_API_IsCalibrated</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>compass_API_ForceReCalibration</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>getCalibrationData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>setCalibrationData</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>findDirection</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = findDirection &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[165]"></a>iNemo_quat2heading</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = iNemo_quat2heading &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Update
</UL>

<P><STRONG><a name="[167]"></a>iNemoEngine_9p6_setOrientation</STRONG> (Thumb, 1438 bytes, Stack size 40 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_9
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_setKnobs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
</UL>

<P><STRONG><a name="[141]"></a>iNemoEngine_API_initialize</STRONG> (Thumb, 1048 bytes, Stack size 32 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iNemoEngine_API_initialize &rArr; iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_9
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncHeadway_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>iNemoEngine_API_setKnobs</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iNemoEngine_API_setKnobs &rArr; iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>iNemoEngine_API_getKnobs</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iNemoEngine_API_getKnobs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>iNemoEngine_API_get_status_6X</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>iNemoEngine_API_get_status_9X</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>iNemoEngine_API_enable_6X</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iNemoEngine_API_enable_6X &rArr; AsyncHeadway_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncHeadway_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>iNemoEngine_API_enable_9X</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iNemoEngine_API_enable_9X &rArr; AsyncHeadway_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncHeadway_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>iNemoEngine_API_setGbias</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = iNemoEngine_API_setGbias &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>iNemoEngine_API_getGbias</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iNemoEngine_API_getGbias &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>m_qmult_eml</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[16f]"></a>m_mldivide</STRONG> (Thumb, 544 bytes, Stack size 60 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = m_mldivide
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[16b]"></a>m_interp1q_constrain</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_interp1q_constrain &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[16d]"></a>m_kalman_3gyro</STRONG> (Thumb, 14450 bytes, Stack size 1856 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmax
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_std
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_interp1q_constrain
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mldivide
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
</UL>

<P><STRONG><a name="[178]"></a>SpacePointAlgorithm</STRONG> (Thumb, 964 bytes, Stack size 352 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[14a]"></a>iNemoEngine_API_Update</STRONG> (Thumb, 892 bytes, Stack size 64 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3016<LI>Call Chain = iNemoEngine_API_Update &rArr; iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>output_update</STRONG> (Thumb, 742 bytes, Stack size 112 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>

<P><STRONG><a name="[14b]"></a>iNemoEngine_API_Propagate</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = iNemoEngine_API_Propagate &rArr; iNemo_propagate &rArr; output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>iNemoEngine_API_Get_Lib_Version</STRONG> (Thumb, 42 bytes, Stack size 64 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iNemoEngine_API_Get_Lib_Version
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osx_motion_fx.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>eCompass_Offset</STRONG> (Thumb, 1362 bytes, Stack size 224 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = eCompass_Offset &rArr; IsNotFlat
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNotFlat
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_API_Run
</UL>

<P><STRONG><a name="[179]"></a>iNemoEngine_9p6_Update</STRONG> (Thumb, 1892 bytes, Stack size 616 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952<LI>Call Chain = iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect_6X
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Update
</UL>

<P><STRONG><a name="[17b]"></a>m_rt_atan2f_snf</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2ypr2_eml
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
</UL>

<P><STRONG><a name="[17f]"></a>iNemo_propagate_6X</STRONG> (Thumb, 1314 bytes, Stack size 160 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = iNemo_propagate_6X &rArr; output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect_6X
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Propagate
</UL>

<P><STRONG><a name="[17e]"></a>iNemo_propagate</STRONG> (Thumb, 1300 bytes, Stack size 160 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = iNemo_propagate &rArr; output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Propagate
</UL>

<P><STRONG><a name="[1a0]"></a>rotVect</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, osx_motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[1a1]"></a>SpacePointGyroProp</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, osx_motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpacePointGyroProp &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>

<P><STRONG><a name="[1a4]"></a>osx_LibLocker_GetLibrary</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osx_LibLocker_GetLibrary
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_IsNodeFree
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_UnwrapAPIs
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_SetHandle
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>

<P><STRONG><a name="[1a3]"></a>osx_LibLocker_Decrypt16</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osx_LibLocker_Decrypt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Decrypt32
</UL>

<P><STRONG><a name="[1a2]"></a>osx_LibLocker_Decrypt32</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osx_LibLocker_Decrypt32 &rArr; osx_LibLocker_Decrypt16
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Decrypt16
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_RegisterLicense
</UL>

<P><STRONG><a name="[1a5]"></a>osx_LibLocker_RetrieveUID</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, osxLibraryLocker100_CM4F_Keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osx_LibLocker_RetrieveUID
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_UnwrapAPIs
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osx_LibLocker_Authenticate
</UL>

<P><STRONG><a name="[351]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
